# -*- coding: utf-8 -*-
"""
Created on Mon Aug  6 00:04:55 2018

@author: Alex Peden
"""
"""
GOAL: to write a programme that solves the following puzzle from the BBC Radio/
today programme:

Puzzle No.1 â€“ Monday 3 July

Take the digits 1,2,3 up to 9 in numerical order and put either a plus sign/
or a minus sign or neither between the digits to make a sum that adds up to/
100. /
For example, one way of achieving this is: 1 + 2 + 34 - 5 + 67 - 8 + 9 = 100,/
which uses six plusses and minuses./
What is the fewest number of plusses and minuses you need to do this?
"""
 
def num_dict(number_length, num_list = None, num_dict = None):
    """
    generates a list (num_list) of string numbers, starting at '1' and \
    incrementing by 1 to a maximum of number_length
    So if number_length = 9, the list generated would be \
    ['1','2','3','4','5','6','7','8','9']. This list is added to a dictionary\
    (num_dict) and is given a key of zero.
    
    number_length: int, the desired length of the number series
     
    return dict containing one key:value pair, namely a list of incrementing\
    number strings with key = 0
    """
    if num_list == None:
        num_list = []
    if num_dict == None:
        num_dict = {}
    assert type(number_length) == int
    for i in range(1,number_length+1):
        num_list.append(str(i))
        num_dict[0]= num_list
    return num_dict

def list_join(num_list):
    """
    Takes a list of str numbers and possibly str space flanked operators\
    (' + ' or ' - ') and converts to a single string containing numbers\
    and space-flanked operators e.g. would convert ['8','9'] to '89' and \
    ['1','2','3',' + ','4','5','6'] to 123 + 456.
    
    num_list: list of str numbers and (possibly also) str splace flanked operators
    
    returns a single string of numbers and space flanked operators    
    """
    #print(no_space)
    num_oper_str = ''.join(num_list)
    assert type(num_oper_str) == str
    return num_oper_str 

def computation(strip_string):
    """    
    computation function. Takes a str of numbers and operators
    
    splits above str into a list of ints and str operators
    performs calculation (based on above list) and returns a result (int)
    e.g. the string '123 + 56' would return the int result 179  
    
    strip_string: string generated by the function space_strip
    
    return an int result
    """
      
    assert type(strip_string) == str
    #print(strip_string)
    comp_list = strip_string.split(' ')
    #print(comp_list)
    running_total = int(comp_list[0])
    for i in range(len(comp_list)):
        if comp_list[i] == '+':
            assert type(int(comp_list[i+1])) == int
            running_total += int(comp_list[i+1])
        elif comp_list[i] == '-':
            assert type(int(comp_list[i+1])) == int
            running_total -= int(comp_list[i+1])
    #print('running total is',running_total)
    return running_total


def add_ops(dict_list, new_dict_list = None):
    """
    Takes lists of str numbers with or without additional str space flanked\
    operators ' + ' or ' - ' operators and tries inserting str space flanked pluses\
    ' + ' and then str space flanked minuses ' - ' at all available positions.\
    As each list is generated it is  added to a new dictionary. 
    
    dict_list: dictionary of list of str number series\
    from '1' to/ (max =) '9', incrementing in '1', containing 0 to (max) 8 ' + '\
    or ' - ' str space flanked operators inserted anywhere in the number series\
    not before first number ('1') and not after last (e.g '9') and not where a\ 
    space flanked operator already exists 
    
    return a dict of lists, each with an additional space flanked operators\
                                                        (' + ' or ' - ') added
    """
    if new_dict_list == None:# makes sure new_dict_list is reset with each call
        new_dict_list = {}
    assert type(dict_list) == dict
    assert type(new_dict_list) == dict
    num = 0
    for i in dict_list:   ###i is a list in dict_listsw_dict_list = {}
        for j in range(1,len(dict_list[i])): ###j is an element of list i
            #print(dict_list[i][j])
            if (dict_list[i][j] == ' + ') or (dict_list[i][j-1] == ' + ') or\
                    (dict_list[i][j] == ' - ') or (dict_list[i][j-1] == ' - '):
                    pass
                        #print('" + " or " - " encountered')
                #new_dict_list[num] = dict_list[i]
                #num += 1
            else:
                new_dict_list[num] = dict_list[i][0:j]+[' + ']+dict_list[i][j:]
                #print(new_dict_list[num])
                num += 1
                new_dict_list[num] = dict_list[i][0:j]+[' - ']+dict_list[i][j:]
                #print(new_dict_list[num])
                num += 1
                #print(num)
        assert type(new_dict_list) == dict
    return new_dict_list

def search_dict(dict_list, target):
    """
    Takes a dict of lists and converts lists to strings which are used to compute
    an int result. If this is equal to the target, the programme stops and prints \
    'the answer is....the corresponding string ...and the target' e.g. \
    if the target was 1234584, the following would print 'the ans is '1234567 +\
    8 + 9 = 1234584'. If the dict is empty or ff no answer giving the target is\
    found, the program returns False
    
    dict_list: dict of lists, where each list is incrementing str nums, 
    possibly interspersed with string space flanked ' + ' or ' - ' operators
    target: int value, the answer to be aimed for.
    
    return a string answer or False
    """
    assert type(dict_list) == dict
    assert type(target) == int
    print('target in search_dict is',target)
    try:
        if dict_list == {}:
            return False
        else:
            for i in range(len(dict_list)):
                num_oper_str = list_join(dict_list[i])
                final_total = computation(num_oper_str)
                #print('Final total in search dict is',final_total)
                assert type(final_total) == int
                if final_total == target:
                    return 'The answer is '+ num_oper_str +' = '+str(target)
            return False
    except:
        print('error occurred with search_dict')
        raise

def system_search(num_length, target, running_num_dict = None):
    """
    Generate series of numbers of length num_length
    Asks if number series equals answer e.g. for number length 9 and target 100
    does 123456789 = 100?
    If not inserts one operator (+ or -) at all positions e.g. 1+23456789 or 12+3456789... etc
    Asks if any of these matches the target e.g. does 12+3456789 = 100?
    If none matches, another operator (+ or -) is introduced\ 
    at all positions e.g. 12+3+456789. Asks if any of these matches the target.\
    If target is found the answer is returned\
    If not the statement 'After insertion of ... up to ...operators no solution has been found
    
    num_length: int, chosen length of incremental number series
    target: int, target of choice
    
    return answer or statement saying answer can't be found
    """
    if running_num_dict == None:
        running_num_dict = {}
    assert type(num_length) == int
    assert type(target) == int        
    running_num_dict = num_dict(num_length)
    op_count = 0
    while len(running_num_dict) > 0:
        if search_dict(running_num_dict, target) == False:
            running_num_dict = add_ops(running_num_dict)
            op_count += 1
            if op_count>1:
                print('Now testing with',op_count,'operators' )
            else:
                print('Now testing with',op_count,' operator' )
            
        else:
            print('the programme has finished')
            print(search_dict(running_num_dict, target))
            break
        print('We could not find a solution')
    
    
